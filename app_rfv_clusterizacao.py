import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from io import BytesIO
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configura√ß√£o da p√°gina - DEVE SER O PRIMEIRO COMANDO STREAMLIT
st.set_page_config(
    page_title='RFV + Clusteriza√ß√£o - Segmenta√ß√£o Avan√ßada',
    page_icon='üìä',
    layout="wide",
    initial_sidebar_state='expanded'
)

# Fun√ß√µes auxiliares
@st.cache_data
def to_excel(df):
    """Converte DataFrame para Excel"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='RFV_Cluster_Analysis')
    return output.getvalue()

def recencia_class(x, r, q_dict):
    """Classifica a rec√™ncia (menor valor = melhor)"""
    if x <= q_dict[r][0.25]: return 'A'
    elif x <= q_dict[r][0.50]: return 'B'
    elif x <= q_dict[r][0.75]: return 'C'
    else: return 'D'

def freq_val_class(x, fv, q_dict):
    """Classifica frequ√™ncia/valor (maior valor = melhor)"""
    if x <= q_dict[fv][0.25]: return 'D'
    elif x <= q_dict[fv][0.50]: return 'C'
    elif x <= q_dict[fv][0.75]: return 'B'
    else: return 'A'

def find_optimal_clusters(data, max_k=10):
    """Encontra o n√∫mero ideal de clusters usando o m√©todo do cotovelo"""
    inertias = []
    silhouette_scores = []
    k_range = range(2, max_k + 1)
    
    for k in k_range:
        kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
        kmeans.fit(data)
        inertias.append(kmeans.inertia_)
        
        if len(set(kmeans.labels_)) > 1:  # Silhouette score precisa de pelo menos 2 clusters
            silhouette_scores.append(silhouette_score(data, kmeans.labels_))
        else:
            silhouette_scores.append(0)
    
    return inertias, silhouette_scores, list(k_range)

def main():
    # Cabe√ßalho da aplica√ß√£o
    st.title('üìä An√°lise RFV + Clusteriza√ß√£o - Segmenta√ß√£o Avan√ßada')
    
    st.markdown("""
    **An√°lise RFV combinada com Clusteriza√ß√£o** para segmenta√ß√£o mais precisa de clientes.
    Esta abordagem combina a simplicidade do RFV com o poder de machine learning n√£o supervisionado.
    """)
    
    # Upload do arquivo
    st.sidebar.header("üì§ Upload de Dados")
    uploaded_file = st.sidebar.file_uploader(
        "Carregue seu arquivo de compras (CSV ou Excel)",
        type=['csv', 'xlsx'],
        help="O arquivo deve conter: ID_cliente, DiaCompra, CodigoCompra, ValorTotal"
    )
    
    # Exemplo de download
    with st.sidebar.expander("üìù N√£o tem um arquivo? Use nosso exemplo"):
        exemplo_data = {
            'ID_cliente': [1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 7, 8, 9, 10],
            'DiaCompra': ['2023-01-15', '2023-02-20', '2023-01-10', '2023-03-05', 
                         '2023-02-28', '2023-01-05', '2023-02-15', '2023-03-25',
                         '2023-03-01', '2023-03-20', '2023-02-10', '2023-01-20',
                         '2023-03-15', '2023-02-05', '2023-03-10'],
            'CodigoCompra': [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 
                           1009, 1010, 1011, 1012, 1013, 1014, 1015],
            'ValorTotal': [150.50, 200.00, 75.25, 300.00, 50.00, 500.00, 250.00, 
                         100.00, 75.00, 125.00, 300.00, 80.00, 200.00, 150.00, 400.00]
        }
        df_exemplo = pd.DataFrame(exemplo_data)
        csv_exemplo = df_exemplo.to_csv(index=False).encode('utf-8')
        
        st.download_button(
            label="‚¨áÔ∏è Baixar Arquivo Exemplo (CSV)",
            data=csv_exemplo,
            file_name="dados_exemplo_rfv.csv",
            mime="text/csv"
        )
    
    # Configura√ß√µes de clusteriza√ß√£o
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes de Clusteriza√ß√£o")
    n_clusters = st.sidebar.slider("N√∫mero de Clusters", 2, 8, 5)
    
    if uploaded_file is not None:
        try:
            # Leitura do arquivo
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, parse_dates=['DiaCompra'])
            else:
                df = pd.read_excel(uploaded_file, parse_dates=['DiaCompra'])
            
            st.success(f"‚úÖ Arquivo '{uploaded_file.name}' carregado com sucesso!")
            
            # Verificar colunas necess√°rias
            colunas_necessarias = ['ID_cliente', 'DiaCompra', 'CodigoCompra', 'ValorTotal']
            if not all(col in df.columns for col in colunas_necessarias):
                st.error("‚ùå O arquivo n√£o cont√©m todas as colunas necess√°rias!")
                st.write("Colunas encontradas:", list(df.columns))
                st.write("Colunas necess√°rias:", colunas_necessarias)
                return
            
            # An√°lise RFV
            with st.spinner('üîÑ Processando an√°lise RFV...'):
                # Rec√™ncia
                dia_atual = df['DiaCompra'].max()
                df_recencia = df.groupby('ID_cliente')['DiaCompra'].max().reset_index()
                df_recencia.columns = ['ID_cliente', 'DiaUltimaCompra']
                df_recencia['Recencia'] = (dia_atual - df_recencia['DiaUltimaCompra']).dt.days
                
                # Frequ√™ncia
                df_frequencia = df.groupby('ID_cliente')['CodigoCompra'].count().reset_index()
                df_frequencia.columns = ['ID_cliente', 'Frequencia']
                
                # Valor
                df_valor = df.groupby('ID_cliente')['ValorTotal'].sum().reset_index()
                df_valor.columns = ['ID_cliente', 'Valor']
                
                # Merge RFV
                df_rfv = df_recencia.merge(df_frequencia, on='ID_cliente').merge(df_valor, on='ID_cliente')
                df_rfv.set_index('ID_cliente', inplace=True)
                
                # Segmenta√ß√£o por quartis
                quartis = df_rfv.quantile(q=[0.25, 0.5, 0.75])
                
                df_rfv['R_quartil'] = df_rfv['Recencia'].apply(recencia_class, args=('Recencia', quartis))
                df_rfv['F_quartil'] = df_rfv['Frequencia'].apply(freq_val_class, args=('Frequencia', quartis))
                df_rfv['V_quartil'] = df_rfv['Valor'].apply(freq_val_class, args=('Valor', quartis))
                
                df_rfv['RFV_Score'] = df_rfv['R_quartil'] + df_rfv['F_quartil'] + df_rfv['V_quartil']
                
                # A√ß√µes de marketing
                acoes_marketing = {
                    'AAA': 'üéØ Clientes Premium - Ofertas exclusivas e programas VIP',
                    'AAB': '‚≠ê Clientes Fi√©is - Programas de fidelidade',
                    'ABB': 'üöÄ Clientes em Ascens√£o - Ofertas personalizadas',
                    'BBB': 'üëç Clientes Regulares - Manter engajamento',
                    'CCC': 'üìß Clientes Ocasionais - Campanhas de remarketing',
                    'DDD': 'üí§ Clientes Inativos - Campanhas de reativa√ß√£o',
                    'DAA': '‚ö° Clientes em Risco - Ofertas especiais para reten√ß√£o',
                    'CAA': 'üìû Clientes Valiosos - Contato personalizado'
                }
                
                df_rfv['Acao_Marketing'] = df_rfv['RFV_Score'].map(acoes_marketing)
                df_rfv['Acao_Marketing'] = df_rfv['Acao_Marketing'].fillna('üìã An√°lise personalizada necess√°ria')
            
            st.success('‚úÖ An√°lise RFV conclu√≠da com sucesso!')
            
            # M√©tricas principais
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Clientes", len(df_rfv))
            with col2:
                st.metric("Faturamento Total", f"R$ {df_rfv['Valor'].sum():,.2f}")
            with col3:
                avg_value = df_rfv['Valor'].mean()
                st.metric("Valor M√©dio por Cliente", f"R$ {avg_value:,.2f}")
            
            # --------------------------------------------------
            # AN√ÅLISE DE CLUSTERIZA√á√ÉO
            # --------------------------------------------------
            st.header("üéØ An√°lise de Clusteriza√ß√£o")
            
            # Preparar dados para clusteriza√ß√£o
            X = df_rfv[['Recencia', 'Frequencia', 'Valor']].copy()
            
            # Normalizar os dados
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            
            # Encontrar n√∫mero ideal de clusters
            st.subheader("üìä Encontrando o N√∫mero Ideal de Clusters")
            
            inertias, silhouette_scores, k_range = find_optimal_clusters(X_scaled)
            
            # Gr√°fico do m√©todo do cotovelo
            fig_elbow = go.Figure()
            fig_elbow.add_trace(go.Scatter(x=k_range, y=inertias, mode='lines+markers', name='In√©rcia'))
            fig_elbow.update_layout(
                title='M√©todo do Cotovelo - In√©rcia por N√∫mero de Clusters',
                xaxis_title='N√∫mero de Clusters',
                yaxis_title='In√©rcia'
            )
            
            # Gr√°fico do silhouette score
            fig_silhouette = go.Figure()
            fig_silhouette.add_trace(go.Scatter(x=k_range, y=silhouette_scores, mode='lines+markers', name='Silhouette Score'))
            fig_silhouette.update_layout(
                title='Silhouette Score por N√∫mero de Clusters',
                xaxis_title='N√∫mero de Clusters',
                yaxis_title='Silhouette Score'
            )
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_elbow, use_container_width=True)
            with col2:
                st.plotly_chart(fig_silhouette, use_container_width=True)
            
            # Aplicar K-Means com o n√∫mero selecionado de clusters
            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            df_rfv['Cluster'] = kmeans.fit_predict(X_scaled)
            
            # Calcular silhouette score final
            silhouette_avg = silhouette_score(X_scaled, df_rfv['Cluster'])
            st.metric("Silhouette Score", f"{silhouette_avg:.3f}")
            
            # An√°lise dos clusters
            st.subheader("üìà An√°lise dos Clusters")
            
            # Estat√≠sticas por cluster - C√ìDIGO CORRIGIDO
            cluster_stats = df_rfv.groupby('Cluster').agg({
                'Recencia': ['mean', 'std', 'min', 'max'],
                'Frequencia': ['mean', 'std', 'min', 'max'],
                'Valor': ['mean', 'std', 'min', 'max', 'sum']
            })
            
            # Adicionar contagem de clientes
            cluster_stats['Qtd_Clientes'] = df_rfv.groupby('Cluster').size()
            
            # Renomear colunas multi-level
            cluster_stats.columns = ['_'.join(col).strip() for col in cluster_stats.columns.values]
            cluster_stats = cluster_stats.round(2)
            
            st.dataframe(cluster_stats)
            
            # Visualiza√ß√£o 3D dos clusters
            st.subheader("üëÅÔ∏è Visualiza√ß√£o 3D dos Clusters")
            
            fig_3d = px.scatter_3d(
                df_rfv.reset_index(),
                x='Recencia',
                y='Frequencia',
                z='Valor',
                color='Cluster',
                hover_name='ID_cliente',
                title='Visualiza√ß√£o 3D dos Clusters RFV',
                labels={'Recencia': 'Rec√™ncia (dias)', 'Frequencia': 'Frequ√™ncia', 'Valor': 'Valor (R$)'}
            )
            
            st.plotly_chart(fig_3d, use_container_width=True)
            
            # Distribui√ß√£o dos clusters
            st.subheader("üìä Distribui√ß√£o dos Clusters")
            
            fig_dist = make_subplots(
                rows=2, cols=2,
                subplot_titles=('Rec√™ncia por Cluster', 'Frequ√™ncia por Cluster', 
                               'Valor por Cluster', 'Clientes por Cluster')
            )
            
            # Rec√™ncia
            fig_dist.add_trace(
                go.Box(x=df_rfv['Cluster'], y=df_rfv['Recencia'], name='Rec√™ncia'),
                row=1, col=1
            )
            
            # Frequ√™ncia
            fig_dist.add_trace(
                go.Box(x=df_rfv['Cluster'], y=df_rfv['Frequencia'], name='Frequ√™ncia'),
                row=1, col=2
            )
            
            # Valor
            fig_dist.add_trace(
                go.Box(x=df_rfv['Cluster'], y=df_rfv['Valor'], name='Valor'),
                row=2, col=1
            )
            
            # Contagem de clientes
            cluster_counts = df_rfv['Cluster'].value_counts().sort_index()
            fig_dist.add_trace(
                go.Bar(x=cluster_counts.index, y=cluster_counts.values, name='Clientes'),
                row=2, col=2
            )
            
            fig_dist.update_layout(height=600, showlegend=False)
            st.plotly_chart(fig_dist, use_container_width=True)
            
            # Perfil de cada cluster
            st.subheader("üë• Perfil dos Clusters")
            
            for cluster_id in sorted(df_rfv['Cluster'].unique()):
                with st.expander(f"Cluster {cluster_id} - {len(df_rfv[df_rfv['Cluster'] == cluster_id])} clientes"):
                    cluster_data = df_rfv[df_rfv['Cluster'] == cluster_id]
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Rec√™ncia M√©dia", f"{cluster_data['Recencia'].mean():.1f} dias")
                    with col2:
                        st.metric("Frequ√™ncia M√©dia", f"{cluster_data['Frequencia'].mean():.1f}")
                    with col3:
                        st.metric("Valor M√©dio", f"R$ {cluster_data['Valor'].mean():,.2f}")
                    with col4:
                        st.metric("Valor Total", f"R$ {cluster_data['Valor'].sum():,.2f}")
                    
                    st.write("**Top 5 RFV Scores neste cluster:**")
                    st.write(cluster_data['RFV_Score'].value_counts().head())
                    
                    st.write("**A√ß√µes de Marketing mais comuns:**")
                    st.write(cluster_data['Acao_Marketing'].value_counts().head())
            
            # Compara√ß√£o RFV vs Clusteriza√ß√£o
            st.header("üîÑ Compara√ß√£o: RFV vs Clusteriza√ß√£o")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Segmenta√ß√£o RFV")
                rfv_counts = df_rfv['RFV_Score'].value_counts()
                fig_rfv = px.pie(values=rfv_counts.values, names=rfv_counts.index, 
                                title='Distribui√ß√£o por Score RFV')
                st.plotly_chart(fig_rfv, use_container_width=True)
            
            with col2:
                st.subheader("Segmenta√ß√£o por Cluster")
                cluster_counts = df_rfv['Cluster'].value_counts()
                fig_cluster = px.pie(values=cluster_counts.values, 
                                    names=[f'Cluster {i}' for i in cluster_counts.index],
                                    title='Distribui√ß√£o por Cluster')
                st.plotly_chart(fig_cluster, use_container_width=True)
            
            # Cruzamento RFV x Cluster
            st.subheader("üìã Cruzamento RFV x Cluster")
            cross_tab = pd.crosstab(df_rfv['RFV_Score'], df_rfv['Cluster'])
            st.dataframe(cross_tab.style.background_gradient(cmap='Blues'))
            
            # Download dos resultados
            st.header("üì• Download dos Resultados")
            
            excel_data = to_excel(df_rfv.reset_index())
            
            st.download_button(
                label="üíæ Baixar An√°lise RFV + Clusters (Excel)",
                data=excel_data,
                file_name="analise_rfv_clusters.xlsx",
                mime="application/vnd.ms-excel"
            )
            
        except Exception as e:
            st.error(f"‚ùå Erro ao processar o arquivo: {str(e)}")
            st.write("Detalhes do erro:", e)
    
    else:
        st.info("üëÜ Fa√ßa upload de um arquivo CSV ou Excel para iniciar a an√°lise")

if __name__ == '__main__':
    main()